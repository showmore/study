package cn.joyair.mvcproject.controller;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import cn.joyair.mvcproject.model.User;
import cn.joyair.mvcproject.service.FactoryService;
import cn.joyair.mvcproject.service.OnlineService;
import cn.joyair.mvcproject.service.UserService;
import cn.joyair.mvcproject.utils.CookieUtils;

public class UserController extends HttpServlet{
	private static final long serialVersionUID = 1L;
	
	UserService userService = FactoryService.getUserService(); 
	OnlineService onlineService = FactoryService.getOnlineService();
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		doPost(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException {
		System.out.println("这里是doPOST处理");
		// 在这一个方法里需要转发增删改查需求
		
		// 设置字符集
		req.setCharacterEncoding("UTF-8");
		resp.setCharacterEncoding("UTF-8");
		
		String mn =req.getServletPath();
		mn = mn.substring(1);
		mn = mn.substring(0, mn.length()-4);

//		if(mn.equals("query")) {
//			query();
//		}
		//利用反射，用mn地址名判断方法名
		try {
			Method method = this.getClass().getDeclaredMethod(mn, HttpServletRequest.class, HttpServletResponse.class);
			method.invoke(this, req, resp);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	}
	
	private void add(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException {
		User user = new User();
		user.setName(req.getParameter("username"));
		user.setId(req.getParameter("userID"));
		user.setIdentity(req.getParameter("identity"));
		user.setPhone(req.getParameter("phone"));
		
		int rows = userService.save(user);
		if(rows>0) {
			resp.sendRedirect(req.getContextPath() + "/main.jsp");
		}else {
			resp.sendRedirect(req.getContextPath() + "/error.jsp");
//			throw new RuntimeException("添加用户失败！");
		}
	}
	
	private void query(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException {
		System.out.println("Let's query!");
		String username = req.getParameter("username");
		String identity = req.getParameter("identity");
		String phone = req.getParameter("phone");
		
		/**正则表达式**/
	    String reg = "(?:')|(?:--)|(/\\*(?:.|[\\n\\r])*?\\*/)|"
	                + "(\\b(select|update|union|and|or|delete|insert|trancate|char|into|substr|ascii|declare|exec|count|master|into|drop|execute)\\b)";
		
	    username = username==null?"":username.replaceAll(reg, "");
	    identity = identity==null?"":identity.replaceAll(reg, "");
	    phone = phone==null?"":phone.replaceAll(reg, "");
	    
		List<User> list = userService.query(username,identity,phone);
		System.out.println(list);
		req.setAttribute("userList", list); // 把结果集放到req的属性空间
		req.getRequestDispatcher("/main.jsp").forward(req, resp);

	}
	
	private void delete(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException {
		String id = req.getParameter("userID"); 
		
		int rows = userService.deleteUserById(id);
		if(rows>0) {
			resp.sendRedirect(req.getContextPath() + "/main.jsp");
		}else {
			resp.sendRedirect(req.getContextPath() + "/error.jsp");
		}
	}
	
	private void update(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException {
		String id = req.getParameter("userID");
		User user = userService.get(id);
		req.setAttribute("user", user);
		System.out.println(user);
		req.getRequestDispatcher("/update.jsp").forward(req, resp);
		
	}
	
	private void updatedo(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException {
		String id = req.getParameter("userID");
		// 通过id,把数据库中原来的User信息拿到
		User user = userService.get(id);
		
		String yUsername = user.getName();
		String xUsername = req.getParameter("username");
		
		long cout = userService.getCountByName(xUsername);
		
		if(!xUsername.equals(yUsername) && cout > 0) {
			// 在新老名字不一样的情况下，还可以在数据库中找到同名记录。证明新名字冲突
			req.setAttribute("note", xUsername+",这个名字已经被占用，请换一个名字！");
			req.getRequestDispatcher("/update.udo?id="+id).forward(req, resp);
			return;
		}
		
		user.setName(xUsername);
		user.setIdentity(req.getParameter("identity"));
		user.setPhone(req.getParameter("phone"));
		
		int rows = userService.updateUserById(user);
		if(rows>0) {
			resp.sendRedirect(req.getContextPath()+"/main.jsp");
		}else {
			resp.sendRedirect(req.getContextPath()+"/error.jsp");
		}
		
	}
	
	
	private void login(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException  {
		System.out.println("login.udo");
		String username = req.getParameter("username")==null?"":req.getParameter("username");
		String identity = req.getParameter("identity")==null?"":req.getParameter("identity");
		String expiredays = req.getParameter("expiredays")==null?"":req.getParameter("expiredays");

		Cookie[] cookies = req.getCookies();
		boolean login = false;
		String account = null;
		String ssid = null; //通过cookie拿到的判断标记
		
		if(cookies!=null && cookies.length>0) {
			for(Cookie cookie:cookies ) {
				if(cookie.getName().equals("userkey")) {
					account = cookie.getValue();
				}
				if(cookie.getName().equals("ssid")) {
					ssid = cookie.getValue();
				}
				
			}
		}
		
		if(account!=null && ssid !=null) {
			login = ssid.equals(CookieUtils.md5Encrypt(username));
			
		}
		
		if(!login) { //表示用户没登陆
			//用户第一次访问
			User user = userService.login(username, identity); //通过访问数据库，判断用户密码匹配
			//userService里的login方法，判断并返回User对象，或null
			if(user != null ) { //登陆成功
				expiredays=expiredays==null?"":expiredays;
				switch (expiredays) {
				case "7":
					CookieUtils.createCookie(username, req, resp, 7*24*60*60);
					break;
				case "30":
					CookieUtils.createCookie(username, req, resp, 30*24*60*60);
					break;
				case "100":
					CookieUtils.createCookie(username, req, resp, Integer.MAX_VALUE);
					break;

				default:
					CookieUtils.createCookie(username, req, resp, -1); //浏览器关闭，cookie失效
					break;
				}
				
				req.getSession().setAttribute("user", username);
				
				//登陆成功，允许进入main.jsp
				req.getRequestDispatcher("/main.jsp").forward(req, resp);
			}else {
				req.setAttribute("note", "用户名或密码错误！");
				req.getRequestDispatcher("/login.jsp").forward(req, resp);
			}
			
		 }else {
			 req.getSession().setAttribute("user", username);
			 //调用onlineService层的方法，获取到所有的在线用户的信息
			 
			 
			 //登录成功了，准许用户进入main.jsp
			 req.getRequestDispatcher("/main.jsp").forward(req, resp);
		 }
		
	}
	
	
	
	private void logout(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException  {
		//记录登陆状态的cookie
		Cookie[] cookies =req.getCookies();
		if(cookies != null && cookies.length>0) {
			for(Cookie cookie:cookies) {
				if(cookie.getName().equals("userkey")) {
					cookie.setMaxAge(0);
					resp.addCookie(cookie);
				}
				if(cookie.getName().equals("ssid")) {
					cookie.setMaxAge(0);
					resp.addCookie(cookie);
				}
			}
		}
		//记录登陆状态的session删除
		HttpSession session = req.getSession();
		if(session!=null) {
			session.removeAttribute("user");
		}
		
		//退出后跳转login.jsp
		resp.sendRedirect(req.getContextPath()+"/login.jsp");
	}

	/**
	 * 显示所有在线用户的信息
	 * @param req
	 * @param resp
	 * @throws ServletException
	 * @throws IOException
	 */
	public void online(HttpServletRequest req, HttpServletResponse resp) throws  ServletException, IOException  {
		List<Online> online = onlineService.getAllonline();
		
	}
	
}
